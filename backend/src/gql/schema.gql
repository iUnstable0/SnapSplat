scalar DateTimeISO
scalar EmailAddress
scalar JWT
scalar URL
scalar UUID

directive @rateLimit(
  max: Int
  window: String
  message: String
  identityArgs: [String]
  arrayLengthField: String
) on FIELD_DEFINITION

directive @auth(requires: PlatformRole = USER) on OBJECT | FIELD_DEFINITION

##################################

enum PlatformRole {
  SUPER_ADMIN
  ADMIN
  USER
}

type Token {
  token: JWT!
}

type TokenSet {
  token: JWT!
  refreshToken: String!
}

type User {
  userId: UUID!
  email: EmailAddress!
  displayName: String!
  avatar: URL!
  isEmailVerified: Boolean!
  platformRole: PlatformRole!

  events: [Event!]!
}

type Platform {
  isSetupCompleted: Boolean!
}

type Event {
  hostId: UUID!
  eventId: UUID!
  name: String!
  description: String!

  startsAt: DateTimeISO!
  endsAt: DateTimeISO!
  isArchived: Boolean!

  createdAt: DateTimeISO!
}

## Query #########################

type Query {
  hello: String!
  user: User! @auth(requires: USER)
  platform: Platform!
}

## Mutation ######################

type Mutation {
  register(
    captchaToken: String!
    email: EmailAddress!
    displayName: String!
    password: String!
    setupKey: String
  ): TokenSet! @rateLimit(window: "5s", max: 10, message: "Too many requests")

  login(captchaToken: String!, email: String!, password: String!): TokenSet!
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  refreshToken(token: String!, refreshToken: String!): Token!
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  createEvent(
    captchaToken: String!
    name: String!
    description: String
    startsAt: DateTimeISO!
    endsAt: DateTimeISO!
  ): Event!
    @auth(requires: USER)
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  # updateEvent(
  #   captchaToken: String!
  #   eventId: UUID!
  #   name: String
  #   description: String
  #   startsAt: DateTimeISO
  #   endsAt: DateTimeISO
  #   isArchived: Boolean
  # ): Event!
  #   @auth(requires: USER)
  #   @rateLimit(window: "5s", max: 10, message: "Too many requests")

  deleteEvent(captchaToken: String!, eventId: String!): Boolean!
    @auth(requires: USER)
    @rateLimit(window: "5s", max: 10, message: "Too many requests")
}
