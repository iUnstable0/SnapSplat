scalar DateTimeISO
scalar EmailAddress
scalar JWT
scalar URL
scalar UUID

directive @rateLimit(
  max: Int
  window: String
  message: String
  identityArgs: [String]
  arrayLengthField: String
) on FIELD_DEFINITION

directive @auth(requires: PlatformRole = USER) on OBJECT | FIELD_DEFINITION

##################################

enum PlatformRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum EventRole {
  HOST
  COHOST
  ATTENDEE
}

type Token {
  token: JWT!
}

type TokenSet {
  token: JWT!
  refreshToken: String!
}

type User {
  userId: UUID!

  email: EmailAddress!
  displayName: String!
  platformRole: PlatformRole!

  avatar: URL!

  isEmailVerified: Boolean!

  events: [Event!]!
  myEvents: [Event!]!
}

type Platform {
  isSetupCompleted: Boolean!
}

input UpdateEvent {
  name: String
  description: String

  isDraft: Boolean
  isArchived: Boolean
}

type Event {
  eventId: UUID!
  name: String!
  description: String!

  icon: URL!
  cover: URL!
  banner: URL!

  startsAt: DateTimeISO!
  endsAt: DateTimeISO!

  isDraft: Boolean!
  isArchived: Boolean!

  createdAt: DateTimeISO!

  hostUser: User! @auth(requires: ADMIN)

  hostMember: EventMembership!

  memberships: [EventMembership!]!
  myMembership(eventId: UUID): EventMembership

  invites: [EventInvite!]!
}

type EventMembership {
  eventId: UUID!

  eventRole: EventRole!

  displayNameAlt: String!
  avatarAlt: URL!

  joinedAt: DateTimeISO!
  isApproved: Boolean!

  event: Event!

  userId: UUID! @auth(requires: ADMIN)
  user: User! @auth(requires: ADMIN)

  memberId: UUID!
}

type EventInvite {
  eventId: UUID!
  inviteId: UUID!
  inviteCode: String!

  role: EventRole!
  requireApproval: Boolean!

  createdAt: DateTimeISO!
  expiresAt: DateTimeISO

  maxUses: Int!
  uses: Int!

  event: Event!
}

## Query #########################

type Query {
  hello: String!
  me: User! @auth(requires: USER)
  platform: Platform!
  event(eventId: UUID!): Event! @auth(requires: USER)
}

## Mutation ######################

type Mutation {
  register(
    captchaToken: String!
    email: EmailAddress!
    displayName: String!
    password: String!
    setupKey: String
  ): TokenSet! @rateLimit(window: "5s", max: 10, message: "Too many requests")

  login(
    captchaToken: String!
    email: EmailAddress!
    password: String!
  ): TokenSet! @rateLimit(window: "5s", max: 10, message: "Too many requests")

  refreshToken(token: String!, refreshToken: String!): Token!
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  joinEvent(captchaToken: String!, inviteCode: String!): Event!
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  leaveEvent(captchaToken: String!, eventId: UUID!): Boolean!
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  # startsAt: DateTimeISO!
  # endsAt: DateTimeISO!
  createEvent(
    captchaToken: String!
    name: String!
    description: String
  ): Event!
    @auth(requires: USER)
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  updateEvent(
    captchaToken: String!
    eventId: UUID!
    data: UpdateEvent!
  ): Event!
    @auth(requires: USER)
    @rateLimit(window: "5s", max: 10, message: "Too many requests")

  deleteEvent(captchaToken: String!, eventId: UUID!): Boolean!
    @auth(requires: USER)
    @rateLimit(window: "5s", max: 10, message: "Too many requests")
}
