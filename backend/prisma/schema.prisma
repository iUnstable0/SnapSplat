// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlatformRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum EventRole {
  HOST
  COHOST
  ATTENDEE
}

model Platform {
  key String @id

  value String

  @@index([key])
}

model User {
  id Int @id @default(autoincrement())

  userId String @unique @default(uuid(4))

  email        String       @unique
  displayName  String
  platformRole PlatformRole @default(USER)

  isEmailVerified Boolean @default(false)

  avatar String @default("/placeholder.png")

  passwordSession String @unique @default(uuid(4))
  accountSession  String @unique @default(uuid(4))

  createdAt DateTime @default(now())
  password  String

  sessions        Session[]
  suspendedTokens SuspendedToken[]

  memberships  EventMembership[]
  hostedEvents Event[]           @relation("EventHostUser")

  photos EventPhoto[]
}

model Session {
  id Int @id @default(autoincrement())

  userId    String
  sessionId String   @unique
  hash      String   @unique
  expiresAt DateTime

  user User @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model SuspendedToken {
  id Int @id @default(autoincrement())

  userId      String
  tokenId     String   @unique
  reason      String
  suspendedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [userId])

  @@index([tokenId])
}

model Event {
  id Int @id @default(autoincrement())

  eventId     String @unique @default(uuid(4))
  name        String
  description String @default("")

  icon   String @default("/event-icon-placeholder.png")
  cover  String @default("/event-cover-placeholder.png")
  banner String @default("/event-banner-placeholder.png")

  startsAt DateTime
  endsAt   DateTime

  isDraft    Boolean @default(true)
  isArchived Boolean @default(false)

  createdAt DateTime @default(now())

  // --------------- PRIVATE --------------- //

  hostUserId String
  hostUser   User   @relation("EventHostUser", fields: [hostUserId], references: [userId])

  // --------------- PUBLIC --------------- //

  hostMemberId String?          @unique @default(uuid(4))
  hostMember   EventMembership? @relation("EventHostMembership", fields: [hostMemberId], references: [memberId])

  // --------------- INVERSE RELATIONS --------------- //

  memberships EventMembership[]
  invites     EventInvite[]
  photos      EventPhoto[]

  @@unique([eventId, hostUserId])
  @@index([eventId, hostUserId])
}

model EventMembership {
  id Int @id @default(autoincrement())

  eventId String

  eventRole EventRole @default(ATTENDEE)

  displayNameAlt String
  avatarAlt      String

  joinedAt   DateTime @default(now())
  isApproved Boolean  @default(true)

  event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  // --------------- PRIVATE --------------- //

  userId String

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  // --------------- PUBLIC --------------- //

  memberId String @unique @default(uuid(4))

  // --------------- INVERSE RELATIONS --------------- //

  hostedEvent Event?       @relation("EventHostMembership")
  photos      EventPhoto[]

  @@unique([eventId, userId])
  @@index([eventId, userId, memberId])
}

model EventInvite {
  id Int @id @default(autoincrement())

  eventId    String
  inviteId   String @unique
  inviteCode String @unique

  role            EventRole @default(ATTENDEE)
  requireApproval Boolean   @default(false)

  createdAt DateTime  @default(now())
  expiresAt DateTime?

  maxUses Int @default(0) // 0 = unlimited
  uses    Int @default(0)

  event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  @@index([eventId, inviteId, inviteCode])
}

model EventPhoto {
  id Int @id @default(autoincrement())

  photoId String @unique @default(uuid(4))

  eventId String

  event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  key      String
  width    Int
  height   Int
  mimeType String

  uploadedAt DateTime @default(now())

  // --------------- PRIVATE --------------- //

  userId String?

  user User? @relation(fields: [userId], references: [userId], onDelete: SetNull)

  // --------------- PUBLIC --------------- //

  memberId String?

  member EventMembership? @relation(fields: [memberId], references: [memberId], onDelete: SetNull)

  @@index([eventId])
  @@index([memberId])
}
